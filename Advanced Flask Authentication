############################### MAIN
from flask import Flask, render_template, request, url_for, redirect, flash, send_from_directory
from flask_wtf import FlaskForm
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy

from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, URL
from flask_login import UserMixin, login_user, LoginManager, login_required, current_user, logout_user


app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret-key-goes-here'

# CONNECT TO DB
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy()
db.init_app(app)

###################### FLASK LOGIN MANAGER
# Configure Flask-Login's Login Manager
login_manager = LoginManager()
login_manager.init_app(app)

# Create a user_loader callback
@login_manager.user_loader
def load_user(user_id):
    return db.get_or_404(User, user_id)
########################## ENDS HERE
############################ USERMIXIN IS IMPORTANT
# CREATE TABLE IN DB
# CREATE TABLE IN DB with the UserMixin


class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True)
    password = db.Column(db.String(100))
    name = db.Column(db.String(1000))
 
 
with app.app_context():
    db.create_all()


class CreateRegisterForm(FlaskForm):
    name = StringField("name", validators=[DataRequired()])
    email = StringField("email", validators=[DataRequired()])
    password = PasswordField("password", validators=[DataRequired()])
    submit = SubmitField("Sign me up.")


class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')



@app.route('/')
def home():
    return render_template("index.html")


@app.route('/register', methods=['GET', 'POST'])
def register():
    form = CreateRegisterForm()

    if form.validate_on_submit():
        hash_and_salted_password = generate_password_hash(
            form.password.data,
            method='pbkdf2:sha256',
            salt_length=8
        )
        new_user = User(
            email=form.email.data,
            name=form.name.data,
            password=hash_and_salted_password
        )
        db.session.add(new_user)
        db.session.commit()
        ################### FLASK LOGIN - GIVES REGISTERED USER ACCESS TO SECRETS
        # Log in and authenticate user after adding details to database.
        login_user(new_user)
        ################### ENDS HERE
        return render_template("secrets.html", name=new_user.name)

    return render_template("register.html", form=form)





@app.route('/login', methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        email = form.email.data
        password = form.password.data

        # Find user by email entered.
        user = db.session.execute(db.select(User).where(User.email == email)).scalar()

        # Check if user exists and if the password is correct.
        if user and check_password_hash(user.password, password):
            login_user(user)
            print(user.name)
            return render_template('secrets.html', name=user.name)

    return render_template("login.html", form=form)


@app.route('/secrets')
def secrets():
    return render_template("secrets.html")


@app.route('/logout')
def logout():
    ############# FLASK LOGIN MANAGER LOGOUT FN
    logout_user()
    ############# ENDS HERE
    return redirect(url_for('home'))


@app.route('/download')
def download():
    return send_from_directory('static', path="files/cheat_sheet.pdf")



@app.route('/test-flash')
def test_flash():
    flash('This is a test flash message', 'success')
    return redirect(url_for('secrets'))



if __name__ == "__main__":
    app.run(debug=True)
########################### index
{% extends "base.html" %} {% block content %}

<div class="box">
  <h1>Flask Authentication</h1>
  <!-- TODO: Hide the Login/Registration buttons for logged-in users -->
  <a href="{{ url_for('login') }}" class="btn btn-primary btn-block btn-large"
    >Login</a
  >
  <a
    href="{{ url_for('register') }}"
    class="btn btn-secondary btn-block btn-large"
    >Register</a
  >
</div>

{% endblock %}
####################################### SECRETS

{% extends "base.html" %} {% block content %}

<!--TODO: Display the user's name in the h1 title-->
<div class="container">
  <h1 class="title">Welcome, {{ name }}</h1>
  <!--TODO: Make a GET request to the /download path-->
  <a href="{{ url_for('download') }}">Download Your File</a>
</div>
{% endblock %}


############################################ BASE
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Flask Authentication</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="{{ url_for('static', filename='css/styles.css')}}"
    />
  </head>

  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="/">Flask Authentication</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('home') }}">Home</a>
          </li>
          <!-- TODO: Hide the Login/Registration navigation for logged-in users -->
          {% if not logged_in: %}
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('login') }}">Login</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('register') }}">Register</a>
          </li>
          {% endif %}
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('logout') }}">Log Out</a>
          </li>
        </ul>
      </div>
    </nav>
    {% block content %} {% endblock %}
  </body>
</html>
############################################################## LOGIN

{% extends "base.html" %}

{% block content %}
<div class="box">
  <h1>Login</h1>
  <form action="{{ url_for('login') }}" method="post">
    {{ form.hidden_tag() }}
    <div class="form-group">
      {{ form.email.label }} {{ form.email(class="form-control", required="required") }}
    </div>
    <div class="form-group">
      {{ form.password.label }} {{ form.password(class="form-control", required="required") }}
    </div>
    <button type="submit" class="btn btn-primary btn-block btn-large">Let me in.</button>
  </form>
</div>
{% endblock %}

################################################################## REGISTER
{% extends "base.html" %}
{% block content %}

<div class="box">
	<h1>Register</h1>
<form action="{{ url_for('register') }}" method="post">
    {{ form.hidden_tag() }}
    <input type="text" name="name" placeholder="Name" class="custom-class" required="required" /><br>
    <input type="email" name="email" placeholder="Email" class="custom-class" required="required" /><br>
    <input type="password" name="password" placeholder="Password" class="custom-class" required="required" /><br>
    <button type="submit" class="btn btn-primary btn-block btn-large custom-class">Sign me up.</button>
</form>
<!--    -->
<!--    <form action="{{ url_for('register') }}" method="post">-->
<!--    {{ form.hidden_tag() }}-->
<!--    {{ form.name.label(class="custom-class") }} {{ form.name(class="custom-class") }} <br>-->
<!--    {{ form.email.label(class="custom-class") }} {{ form.email(class="custom-class") }} <br>-->
<!--    {{ form.password.label(class="custom-class") }} {{ form.password(class="custom-class") }} <br>-->
<!--    {{ form.submit(class="custom-class") }}-->
<!--</form>-->


</div>

{% endblock %}


